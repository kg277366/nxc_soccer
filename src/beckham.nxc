/* 2012.04.19 */

#define PID_P		20
#define PID_I		40
#define PID_D		100


// CONSTRUCTION PARAMS
#define OUT_DRIVE_L	OUT_A
#define OUT_DRIVE_R	OUT_C
#define OUT_DRIVE	OUT_AC
#define MM_PER_TURN	137
#define TRACK_FRONT_MM	119

// SENSORS
#define ULTRASONIC IN_2
#define COMPASS IN_1
#define IR_SEEKER IN_4

#define MM2DEG(x)	(360 * x / MM_PER_TURN)

#define Q_SIZE 4;

#define TextNumOut(xPos,yPos,str,col,num) TextOut(xPos,yPos,str); \
        NumOut(xPos+6*col,yPos,num)

// TYPES

typedef struct {
	int x, y;
	int heading;
} RobotPos;

typedef struct {
	int x, y;
	int vx, vy;
} BallPos;

typedef struct {
	int compass;
	int ir_ball;
	int distance;
} SensorsValues;

// QUEUE

typedef struct {
	int beg, end;
	RobotPos steps[Q_SIZE];
} Queue;

int qGet(Queue &q, RobotPos &res) {
	if (q.beg == q.end) {
		return 0;
	} else {
		res = q.steps[q.beg];
		q.beg = (q.beg + 1) % Q_SIZE;
	}
}

int qPut(Queue &q, RobotPos &pos) {
	q.steps[q.end] = pos;
	q.end = (q.end + 1) % Q_SIZE;
}

inline int qEmpty(Queue &q) {
	return q.beg == q.end;
}

// GLOBAL VARIABLES

RobotPos myPos, destPos;
BallPos ballPos;
SensorsValues sensorsValues;
Queue queue;

// MUTEX
mutex moveMutex;

void init() {
	SetSensorLowspeed(ULTRASONIC);
	SetSensorLowspeed(COMPASS);
	SetSensorLowspeed(IR_SEEKER);
}

void calibration() {

}

task move() {
	while(1) {
		Acquire(moveMutex);
		Release(moveMutex);
	}
}

task AI() {

}

task readSensors() {
	byte s1, s2, s3, s4, s5; //TODO policzyc z tego dokladniejsza wartosc
	while(1) {
		unsigned int a, b;

		a = CurrentTick();

		sensorsValues.compass = SensorHTCompass(COMPASS);
		sensorsValues.distance = SensorUS(ULTRASONIC);
		bool result = ReadSensorHTIRSeeker2AC(IR_SEEKER, sensorsValues.ir_ball, s1, s2, s3, s4, s5);

		b = CurrentTick();

		TextNumOut(0, LCD_LINE1, "Compass:        ",9, sensorsValues.compass);
		TextNumOut(0, LCD_LINE2, "Time:           ",6, (b - a));
		TextNumOut(0, LCD_LINE3, "Dir:            ",4, sensorsValues.ir_ball);
		TextNumOut(6, LCD_LINE4, "S1:             ",3,s1);
		TextNumOut(6, LCD_LINE5, "S2:             ",3,s2);
		TextNumOut(6, LCD_LINE6, "S3:             ",3,s3);
		TextNumOut(6, LCD_LINE7, "S4:             ",3,s4);
		TextNumOut(6, LCD_LINE8, "S5:             ",3,s5);

		Wait(100);
	}
}

task main() {
	init();
	calibration();

	Precedes(readSensors);//, AI, move);
}
