/* 2012.04.19 */

#include "sin256.h"

#define PID_P		20
#define PID_I		40
#define PID_D		100


// CONSTRUCTION PARAMS
#define OUT_DRIVE_L	OUT_A
#define OUT_DRIVE_R	OUT_C
#define OUT_DRIVE	OUT_AC
#define OUT_KICK	OUT_B
#define MM_PER_TURN	137
#define TRACK_FRONT_MM	119
#define COMPASS_ACC 5
#define FIELD_W 1200
#define FIELD_H 1200
#define POS_ACC 50
#define BALL_DEF_DIST 1000
#define IN_POS_ACC 20
#define KICK_TIMEOUT 2000 // 2 s

// SENSORS
#define ULTRASONIC IN_2
#define COMPASS IN_1
#define IR_SEEKER IN_4

#define MM2DEG(x)	(360 * x / MM_PER_TURN)
#define DEG2MM(x) (x * MM_PER_TURN / 360)

#define Q_SIZE 4;

#define TextNumOut(xPos,yPos,str,col,num) TextOut(xPos,yPos,str); \
	NumOut(xPos+6*col,yPos,num)


// TYPES

typedef struct {
	int x, y;
	int heading;
} RobotPos;

typedef struct {
	int x, y;
	int vx, vy;
} BallPos;

typedef struct {
	int compass;
	int ir_ball;
	int ir_dir;
	int distance;
} SensorsValues;

// QUEUE

typedef struct {
	int beg, end;
	RobotPos steps[Q_SIZE];
} Queue;

void qGet(Queue &q, RobotPos &res) {
	res = q.steps[q.beg];
	q.beg = (q.beg + 1) % Q_SIZE;
}

void qPut(Queue &q, RobotPos &pos) {
	q.steps[q.end] = pos;
	q.end = (q.end + 1) % Q_SIZE;
}

inline void qPeek(Queue &q, RobotPos &res) {
	res = q.steps[q.beg];
}

inline int qEmpty(Queue &q) {
	return q.beg == q.end;
}

// GLOBAL VARIABLES
int north;
RobotPos myPos, destPos;
BallPos ballPos;
SensorsValues sensorsValues;
//Queue queue;

// MUTEX
mutex moveMutex;

// Movement utilities
#include "mov.h"

void init() {
  runs_begin.runs = 0;
	MOV_init();
	SetSensorLowspeed(ULTRASONIC);
	SetSensorLowspeed(COMPASS);
	SetSensorLowspeed(IR_SEEKER);
}

void calibration() {

	north = 360 - SensorHTCompass(COMPASS);
	sensorsValues.compass = 0;


	Wait(500);
	myPos.y = 0; // FIELD_H - SensorUS(ULTRASONIC) * 10;
	rotate2w(90);
	Wait(500);
	myPos.x = 0; // FIELD_W - SensorUS(ULTRASONIC) * 10;
	rotate2w(-90);
	//Wait(2000);

	PlaySound(SOUND_DOUBLE_BEEP);

}

inline int onPosition() {
	return (destPos.x < 0 || (abs(destPos.x - myPos.x) < IN_POS_ACC
				&& abs(destPos.y - myPos.y) < IN_POS_ACC));
}

task move() {
	int x, y, dist, ro;
	/*while(1) {
	  Acquire(moveMutex);
	  if (onPosition()) { // Only rotation
	  rotate2w(destPos.heading - myPos.heading);
	  } else {
	  x = destPos.x - myPos.x;
	  y = destPos.y - myPos.y;
	  int deg = 3.14 * atan2(x, y) / 180;
	  roatate2w(destPos.heading - deg);
	  int dist = sqrt(x*x + y*y);
	  run(dist);
	  }
	  Release(moveMutex);
	  } */
}

task AI() {
	while(1) {
		destPos.x = 100;
		destPos.y = 50;
		destPos.heading = 50;
	} 
}

// Tells if pointing right direction with tolerance
inline int dirIn(int dir, int tolerance) {
  int x = abs(myPos.heading - dir);
  x = x > 180 ? 360 - x : x;
  return x < tolerance;
}

// Tells if aiming one of the walls
inline int aimingWall() {
  return ((sensorsValues.compass + COMPASS_ACC) % 90 < 2 * COMPASS_ACC);
}

#define MIN_OBSTACLE 50

// tells if aiming obstacle
int aimingObstacle(int cut_off) { // more advanced - need exact position tracing
  int d = sensorsValues.distance;
  if (d < cut_off) {
    int y = (d * sin256(90 - myPos.heading)) / 256;
    int d_wall = y > 0 ? FIELD_W - myPos.y : myPos.y;
    return abs(d_wall - d) < MIN_OBSTACLE;
  } else {
    return 0;
  }
}

#define BALL_CUT_OFF 250
#define CLOSE_BALL_DIST 100

// simple test for aiming ball
int aimingBall() {
  int ir = sensorsValues.ir_dir;
  return (ir == 5) ||
     (ir > 3 && ir < 8 && sensorsValues.distance < BALL_CUT_OFF);
}

// returns degrees needed to head oponent goal
int degsToGoal() {
  int need = atan32((myPos.x - FIELD_W / 2) * 32 / (FIELD_H - myPos.y));
  return (myPos.heading > 180 ? 360 - myPos.heading : - myPos.heading) + need;
}

void findBall() {
  int timeout = 200;

	while (1) {
		int dir = sensorsValues.ir_dir;
		int power = ((dir - 5) * 75) / 5;

		if (!aimingBall()) {
			int lpower = -power;
			int rpower = power;
			OnFwd(OUT_DRIVE_L, lpower);
			OnFwd(OUT_DRIVE_R, rpower);
		}
		else {
			Off(OUT_DRIVE_L);
			Off(OUT_DRIVE_R);
			break;
		}
		Wait(50);
    if (!timeout--) { PlaySound(SOUND_LOW_BEEP);break;}
	}
}

#define SEARCH_SPEED 80
#define APP_SPEED 40
#define LEAD_SPEED 30
#define SLOW_ROT 30
#define SHOT_DIST_1 FIELD_H / 2
#define SHOT_DIST_2 FIELD_H * 0.8

int ai_state = 1;

#define SEARCH_S 1
#define SHOT_S 3
#define TRY_S 4
#define LEAD_S 2


task oneShotAI2() {
  Wait(1000); 
  while (1) {
    switch(ai_state) {
      case SEARCH_S :
        findBall();
        while(sensorsValues.distance > CLOSE_BALL_DIST) {
          if (sensorsValues.distance < BALL_CUT_OFF) {
            runI(APP_SPEED);
          } else {
            runI(SEARCH_SPEED);
          }
          Wait(50);
          if (!aimingBall()) {
            stopI();
            findBall();
          }
        }
        stopI();
        ai_state = LEAD_S;
      break;
      case LEAD_S :
        PlaySound(SOUND_DOUBLE_BEEP);
        if (myPos.heading < 90 || myPos.heading > 270) {
          // facing north. trying rotation.
        } else {
          run(-120);
          if (myPos.heading < 180) {
            // going for right
            rotate2ws(90, SLOW_ROT);
            run(120);
            rotate2ws(-90, SLOW_ROT);
            run(120);
        rotate1ws(- myPos.heading,
            SLOW_ROT);
          } else {
          //going for right
            rotate2ws(-90, SLOW_ROT);
            run(120);
            rotate2ws(90, SLOW_ROT);
            run(120);
        rotate1ws(360 - myPos.heading,
            SLOW_ROT);
          }
        }
        PlaySound(SOUND_CLICK);
        rotate1ws(degsToGoal(), SLOW_ROT);
        // Jest jeszcze opcja zeby kopal od razu.
        
        /* runI(LEAD_SPEED);
        while (aimingBall() && myPos.y < SHOT_DIST_1) {
           Wait(50);
        }
        stopI();
        if (!aimingBall()) {
          ai_state = SEARCH_S;
        } else {
          ai_state = SHOT_S;
        }
        
      break;
      case SHOT_S :*/
        kick();
        ai_state = SEARCH_S;
      break;
	  }
  }
}

task oneShotAI() {
  Wait(1000); 
  while (1) {
    switch(ai_state) {
      case SEARCH_S :
        findBall();
        while(sensorsValues.distance > CLOSE_BALL_DIST) {
          if (sensorsValues.distance < BALL_CUT_OFF) {
            runI(APP_SPEED);
          } else {
            runI(SEARCH_SPEED);
          }
          Wait(50);
          if (!aimingBall()) {
            stopI();
            findBall();
          }
        }
        stopI();
        ai_state = LEAD_S;
      break;
      case LEAD_S :
        PlaySound(SOUND_DOUBLE_BEEP);
        rotate2ws(degsToGoal(), LEAD_SPEED);
        runI(LEAD_SPEED);
        while (aimingBall() && myPos.y < SHOT_DIST_1) {
           Wait(50);
        }
        stopI();
        if (!aimingBall()) {
          ai_state = SEARCH_S;
        } else {
          ai_state = SHOT_S;
        }
      break;
      case SHOT_S :
        kick();
        ai_state = SEARCH_S;
      break;
	  }
  }
}


task ultraAI() {
 
  while (1) {
    Wait(1000);
    switch(ai_state) {
      case SEARCH_S :
        findBall();
        while(sensorsValues.distance > CLOSE_BALL_DIST) {
          if (sensorsValues.distance < BALL_CUT_OFF) {
            runI(APP_SPEED);
          } else {
            runI(SEARCH_SPEED);
          }
          Wait(50);
          if (!aimingBall()) {
            stopI();
            findBall();
          }
        }
        stopI();
        ai_state = LEAD_S;
      break;
      case LEAD_S :
        PlaySound(SOUND_DOUBLE_BEEP);
        rotate2ws(myPos.heading > 180 ? 360 - myPos.heading : - myPos.heading,
            LEAD_SPEED);
        runI(LEAD_SPEED);
        Wait(1000);
        stopI();
        ai_state = SHOT_S;
      break;
      case SHOT_S :
        runI(100);
        kick();
        stopI();
        /*if (sensorsValues.compass < 90 || sensorsValues.compass > 270) {
          run(sensorsValues.distance);
          int rot = sensorsValues.compass < 90 ?
             - myPos.heading : 360 - myPos.heading;

          rotate1w(rot);
          kick();
          run(-100);
          findBall();
          // do przodu
        } else {
          // do tylu
          int app = myPos.x > FIELD_W / 2 ? -1 : 1;
          int dist = sensorsValues.distance;
          rotate2w(app * 20);
          run(dist);
          int rot = app > 0 ? 360 - myPos.heading : - myPos.heading;
          rotate1w(rot);
          kick();
          run(-100);
          findBall();
        }*/
        ai_state = SEARCH_S;
      break;
	  }
  }
}

void sensorCompass() {
	sensorsValues.compass = (SensorHTCompass(COMPASS) + north) % 360;
	myPos.heading = sensorsValues.compass;
}

void sensorUS() {

	sensorsValues.distance = SensorUS(ULTRASONIC) * 10;
	/* if (aimingWall() && !aimingBall()) {
		int nY, nX;
		switch((sensorsValues.compass + COMPASS_ACC) / 90) {
			case 0 :
			case 4 :
				nY = FIELD_H - sensorsValues.distance;
				if (abs(nY - myPos.y) < POS_ACC) {
					myPos.y = nY;
				}
				break;
			case 2 :
				nY = sensorsValues.distance;
				if (abs(nY - myPos.y) < POS_ACC) {
					myPos.y = nY;
				}
				break;
			case 3 :
				nX = sensorsValues.distance;
				if (abs(nX - myPos.x) < POS_ACC) {
					myPos.x = nX;
				}
				break;
			case 1 :
				nX = FIELD_W - sensorsValues.distance;
				if (abs(nX - myPos.x) < POS_ACC) {
					myPos.x = nX;
				}
				break; //TODO ogarniamy czy to nie bedzie przeciwnik
		}
	}*/
}

void findBall2() {
	int ball_dist = sensorsValues.distance < BALL_DEF_DIST ?
		sensorsValues.distance : BALL_DEF_DIST;
	ballPos.x = myPos.x + (ball_dist * sin256(sensorsValues.ir_ball)) / 256;
	ballPos.y = myPos.y + (ball_dist * sin256(sensorsValues.ir_ball + 90)) / 256;
}

void sensorIR() {
	int dir;
	byte s1, s2, s3, s4, s5; //TODO policzyc z tego dokladniejsza wartosc
	bool result = ReadSensorHTIRSeeker2AC(IR_SEEKER, dir, s1, s2, s3, s4, s5);
	sensorsValues.ir_ball = (myPos.heading + 30 * dir + 210) % 360;
	sensorsValues.ir_dir = dir;
}

task readSensors() {
	while(1) {
		unsigned int a, b;
		a = CurrentTick();


		sensorCompass();
		sensorUS();
		sensorIR();

		b = CurrentTick();

		TextNumOut(0, LCD_LINE1, "Compass:        ",9, sensorsValues.compass);
		TextNumOut(0, LCD_LINE2, "Time:           ",6, (b - a));
		TextNumOut(0, LCD_LINE3, "Dir:            ",5, sensorsValues.ir_dir);
		TextNumOut(0, LCD_LINE4, "Dist:           ",6, sensorsValues.distance);
		TextNumOut(0, LCD_LINE5, "X:              ",6, myPos.x);
		TextNumOut(0, LCD_LINE6, "Y:              ",6, myPos.y);
		TextNumOut(0, LCD_LINE7, "AI:             ",6, ai_state);
    

		Wait(100);
	}
}

task testAI() {
  runI(50);
  Wait(2000);
  stopI();
  Wait(500);
  rotate2w(90);
  runI(50);
  Wait(2000);
  stopI();
  Wait(2000);
  rotate2w(180);
  runI(50);
  Wait(2000);
  stopI();
  /*Wait(500);
  rotate2w(90);
  runI(50);
  Wait(1000);
  stopI();
  Wait(500);
  rotate2w(90);*/
}

task main() {
	init();
	calibration();
	Precedes(readSensors, oneShotAI2);//, AI, move);
}
